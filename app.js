// =====================================================
// –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ö–ê–ß–ï–°–¢–í–û–ú - –ì–õ–ê–í–ù–´–ô –§–ê–ô–õ
// =====================================================

console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º...');

// =====================================================
// –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ü–ï–†–ï–ú–ï–ù–ù–´–ï –ò –ö–û–ù–°–¢–ê–ù–¢–´
// =====================================================
let currentPage = 'home';
let charts = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ Chart.js

const MONTHS_ORDER = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
];

// =====================================================
// –°–ò–°–¢–ï–ú–ê –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–•
// =====================================================
class DataManager {
    static getOPData() {
        try {
            const data = JSON.parse(localStorage.getItem('opDashboardData') || '[]');
            console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –û–ü –¥–∞–Ω–Ω—ã—Ö: ${data.length}`);
            return Array.isArray(data) ? data : [];
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –û–ü –¥–∞–Ω–Ω—ã—Ö:', e);
            return this.generateTestOPData();
        }
    }

    static getProdData() {
        try {
            const data = JSON.parse(localStorage.getItem('prodDashboardData') || '[]');
            console.log(`üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ü—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã—Ö: ${data.length}`);
            return Array.isArray(data) ? data : [];
        } catch (e) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ü—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã—Ö:', e);
            return this.generateTestProdData();
        }
    }

    static saveOPData(data) {
        localStorage.setItem('opDashboardData', JSON.stringify(data));
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –û–ü –¥–∞–Ω–Ω—ã—Ö: ${data.length}`);
    }

    static saveProdData(data) {
        localStorage.setItem('prodDashboardData', JSON.stringify(data));
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ü—Ä–æ–¥–∞–∫—à–Ω –¥–∞–Ω–Ω—ã—Ö: ${data.length}`);
    }

    static generateTestOPData() {
        console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –û–ü');
        return [
            {
                id: this.generateId(),
                date: '25.08.2025',
                manager: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤',
                category: '–ü—Ä–æ–¥–∞–∂–∏',
                indicator: '–ö–∞—á–µ—Å—Ç–≤–æ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏',
                value: 92,
                month: '–ê–≤–≥—É—Å—Ç',
                source: 'test',
                appeal: { status: 'none', note: '', createdAt: null }
            },
            {
                id: this.generateId(),
                date: '24.08.2025',
                manager: '–ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞',
                category: '–ü—Ä–æ–¥–∞–∂–∏',
                indicator: '–†–∞–±–æ—Ç–∞ —Å –≤–æ–∑—Ä–∞–∂–µ–Ω–∏—è–º–∏',
                value: 88,
                month: '–ê–≤–≥—É—Å—Ç',
                source: 'test',
                appeal: { status: 'none', note: '', createdAt: null }
            },
            {
                id: this.generateId(),
                date: '23.08.2025',
                manager: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤',
                category: '–ü—Ä–æ–¥–∞–∂–∏',
                indicator: '–ó–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏',
                value: 76,
                month: '–ê–≤–≥—É—Å—Ç',
                source: 'test',
                appeal: { status: 'none', note: '', createdAt: null }
            },
            {
                id: this.generateId(),
                date: '22.08.2025',
                manager: '–ï–ª–µ–Ω–∞ –†–æ–º–∞–Ω–æ–≤–∞',
                category: '–ü—Ä–æ–¥–∞–∂–∏',
                indicator: '–ö–ª–∏–µ–Ω—Ç—Å–∫–∏–π —Å–µ—Ä–≤–∏—Å',
                value: 95,
                month: '–ò—é–ª—å',
                source: 'test',
                appeal: { status: 'none', note: '', createdAt: null }
            }
        ];
    }

    static generateTestProdData() {
        console.log('üîÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ü—Ä–æ–¥–∞–∫—à–Ω');
        return [
            {
                id: this.generateId(),
                date: '25.08.2025',
                manager: '–ê–Ω–Ω–∞ –ê—Å—Ç–∞–ø–µ–Ω–∫–æ–≤–∞',
                category: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è',
                indicator: '–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å —Å—Ç–∞–¥–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ –∫–∞–Ω–±–∞–Ω—É',
                value: 90,
                month: '–ê–≤–≥—É—Å—Ç',
                source: 'test',
                appeal: { status: 'none', note: '', createdAt: null }
            },
            {
                id: this.generateId(),
                date: '24.08.2025',
                manager: '–ê–∑–∏–∑–∞ –ö–∞–¥—ã—Ä–æ–≤–∞',
                category: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è',
                indicator: '–ó–∞–ø–æ–ª–Ω–µ–Ω—ã –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ –ë–∏—Ç—Ä–∏–∫—Å',
                value: 85,
                month: '–ê–≤–≥—É—Å—Ç',
                source: 'test',
                appeal: { status: 'none', note: '', createdAt: null }
            },
            {
                id: this.generateId(),
                date: '23.08.2025',
                manager: '–†–µ–Ω–∞—Ç–∞ –ì–∞–ª–∏—É–ª–∏–Ω–∞',
                category: '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è',
                indicator: '–¢–ó –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ –≤ —Å–¥–µ–ª–∫—É —Ñ–∞–π–ª–æ–º –≤ –ë–∏—Ç—Ä–∏–∫—Å',
                value: 78,
                month: '–ê–≤–≥—É—Å—Ç',
                source: 'test',
                appeal: { status: 'none', note: '', createdAt: null }
            },
            {
                id: this.generateId(),
                date: '22.08.2025',
                manager: '–°–æ—Ñ–∏—è –ö–æ–Ω–¥—Ä–∞—Ç—å–µ–≤–∞',
                category: '–ü—Ä–æ–¥—é—Å–µ—Ä—ã',
                indicator: '–í —Å–¥–µ–ª–∫–µ –µ—Å—Ç—å –ø—Ä–µ–¥–æ–ø–ª–∞—Ç–∞',
                value: 96,
                month: '–ò—é–ª—å',
                source: 'test',
                appeal: { status: 'none', note: '', createdAt: null }
            }
        ];
    }

    static generateId() {
        return Date.now().toString(36) + Math.random().toString(36).substr(2);
    }

    static addOPRecord(record) {
        const data = this.getOPData();
        record.id = this.generateId();
        record.appeal = { status: 'none', note: '', createdAt: null };
        data.unshift(record);
        this.saveOPData(data);
        return record;
    }

    static addProdRecord(record) {
        const data = this.getProdData();
        record.id = this.generateId();
        record.appeal = { status: 'none', note: '', createdAt: null };
        data.unshift(record);
        this.saveProdData(data);
        return record;
    }
}

// =====================================================
// –ù–ê–í–ò–ì–ê–¶–ò–Ø –ú–ï–ñ–î–£ –°–¢–†–ê–ù–ò–¶–ê–ú–ò
// =====================================================
function showPage(pageId) {
    console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É: ${pageId}`);
    
    // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    document.querySelectorAll('.page').forEach(page => {
        page.classList.remove('active');
    });
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const targetPage = document.getElementById(`${pageId}-page`);
    if (targetPage) {
        targetPage.classList.add('active');
        currentPage = pageId;
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        switch(pageId) {
            case 'op-admin':
                initOPAdmin();
                break;
            case 'prod-admin':
                initProdAdmin();
                break;
            case 'op-dashboard':
                initOPDashboard();
                break;
            case 'prod-dashboard':
                initProdDashboard();
                break;
            case 'home':
                // –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
                break;
        }
    } else {
        console.error(`–°—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
    }
}

// =====================================================
// –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–ò–í–ù–´–ï –ü–ê–ù–ï–õ–ò
// =====================================================
function initOPAdmin() {
    console.log('‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏ –û–ü');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    const form = document.getElementById('op-manual-form');
    if (form) {
        form.addEventListener('submit', handleOPManualSubmit);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV
    setupCSVUpload('op');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    updateHistory('op');
}

function initProdAdmin() {
    console.log('üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω–∫–∏ –ü—Ä–æ–¥–∞–∫—à–Ω');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–æ—Ä–º—ã —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞
    const form = document.getElementById('prod-manual-form');
    if (form) {
        form.addEventListener('submit', handleProdManualSubmit);
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ CSV
    setupCSVUpload('prod');
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏
    updateHistory('prod');
}

function handleOPManualSubmit(e) {
    e.preventDefault();
    
    const formData = {
        date: new Date().toLocaleDateString('ru-RU'),
        manager: document.getElementById('op-manager').value,
        category: '–ü—Ä–æ–¥–∞–∂–∏',
        indicator: document.getElementById('op-indicator').value,
        value: parseInt(document.getElementById('op-value').value),
        month: document.getElementById('op-month').value,
        source: 'manual'
    };
    
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–ü –∑–∞–ø–∏—Å–∏:', formData);
    
    if (validateRecord(formData)) {
        DataManager.addOPRecord(formData);
        showNotification('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        e.target.reset();
        updateHistory('op');
    } else {
        showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
    }
}

function handleProdManualSubmit(e) {
    e.preventDefault();
    
    const formData = {
        date: new Date().toLocaleDateString('ru-RU'),
        manager: document.getElementById('prod-manager').value,
        category: document.getElementById('prod-category').value,
        indicator: document.getElementById('prod-indicator').value,
        value: parseInt(document.getElementById('prod-value').value),
        month: document.getElementById('prod-month').value,
        source: 'manual'
    };
    
    console.log('üìù –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ü—Ä–æ–¥–∞–∫—à–Ω –∑–∞–ø–∏—Å–∏:', formData);
    
    if (validateRecord(formData)) {
        DataManager.addProdRecord(formData);
        showNotification('‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞');
        e.target.reset();
        updateHistory('prod');
    } else {
        showNotification('‚ùå –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è', 'error');
    }
}

function validateRecord(record) {
    return record.manager && 
           record.indicator && 
           record.value >= 0 && 
           record.value <= 100 && 
           record.month;
}

// =====================================================
// –ó–ê–ì–†–£–ó–ö–ê CSV –§–ê–ô–õ–û–í
// =====================================================
function setupCSVUpload(type) {
    const uploadZone = document.getElementById(`${type}-upload`);
    const fileInput = document.getElementById(`${type}-csv-input`);
    
    if (!uploadZone || !fileInput) return;
    
    // –ö–ª–∏–∫ –ø–æ –∑–æ–Ω–µ –∑–∞–≥—Ä—É–∑–∫–∏
    uploadZone.addEventListener('click', () => fileInput.click());
    
    // Drag & Drop
    uploadZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        uploadZone.classList.add('dragover');
    });
    
    uploadZone.addEventListener('dragleave', () => {
        uploadZone.classList.remove('dragover');
    });
    
    uploadZone.addEventListener('drop', (e) => {
        e.preventDefault();
        uploadZone.classList.remove('dragover');
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleCSVFile(files[0], type);
        }
    });
    
    // –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleCSVFile(e.target.files[0], type);
        }
    });
}

function handleCSVFile(file, type) {
    console.log(`üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ CSV —Ñ–∞–π–ª–∞: ${file.name} –¥–ª—è ${type}`);
    
    if (!file.name.toLowerCase().endsWith('.csv')) {
        showNotification('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª', 'error');
        return;
    }
    
    const reader = new FileReader();
    reader.onload = function(e) {
        try {
            const csvData = parseCSV(e.target.result);
            const convertedData = convertCSVData(csvData, type, file.name);
            
            if (convertedData.length > 0) {
                if (type === 'op') {
                    const existingData = DataManager.getOPData();
                    DataManager.saveOPData([...convertedData, ...existingData]);
                } else {
                    const existingData = DataManager.getProdData();
                    DataManager.saveProdData([...convertedData, ...existingData]);
                }
                
                showNotification(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${convertedData.length} –∑–∞–ø–∏—Å–µ–π –∏–∑ ${file.name}`);
                updateHistory(type);
                
                // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–µ
                saveFileInfo(file.name, convertedData.length, type);
            } else {
                showNotification('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞', 'warning');
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV:', error);
            showNotification('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞', 'error');
        }
    };
    
    reader.readAsText(file, 'UTF-8');
}

function parseCSV(csvText) {
    const lines = csvText.split('\n').filter(line => line.trim());
    if (lines.length < 2) return [];
    
    const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
    const data = [];
    
    for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',').map(v => v.trim().replace(/"/g, ''));
        const row = {};
        
        headers.forEach((header, index) => {
            row[header] = values[index] || '';
        });
        
        data.push(row);
    }
    
    return data;
}

function convertCSVData(csvData, type, fileName) {
    const convertedData = [];
    const month = extractMonthFromFileName(fileName);
    
    csvData.forEach(row => {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        if (!row || Object.keys(row).length === 0) return;
        
        if (type === 'op') {
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –û–ü —Ñ–∞–π–ª–æ–≤
            if (row['–ú–µ–Ω–µ–¥–∂–µ—Ä'] && row['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'] && row['–ó–Ω–∞—á–µ–Ω–∏–µ']) {
                convertedData.push({
                    id: DataManager.generateId(),
                    date: new Date().toLocaleDateString('ru-RU'),
                    manager: row['–ú–µ–Ω–µ–¥–∂–µ—Ä'],
                    category: row['–ö–∞—Ç–µ–≥–æ—Ä–∏—è'] || '–ü—Ä–æ–¥–∞–∂–∏',
                    indicator: row['–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å'],
                    value: parseFloat(row['–ó–Ω–∞—á–µ–Ω–∏–µ']) || 0,
                    month: month,
                    source: 'csv',
                    appeal: { status: 'none', note: '', createdAt: null }
                });
            }
        } else {
            // –õ–æ–≥–∏–∫–∞ –¥–ª—è –ü—Ä–æ–¥–∞–∫—à–Ω —Ñ–∞–π–ª–æ–≤
            Object.keys(row).forEach(key => {
                if (key.includes('Unnamed') || 
                    key === 'Month' || 
                    key === 'Week' || 
                    key === '–ò–∑–º–µ—Ä—è–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏' ||
                    key === '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è' ||
                    key === '–ü—Ä–æ–¥—é—Å–µ—Ä—ã') return;
                
                const indicator = row['–ò–∑–º–µ—Ä—è–µ–º—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏'];
                const value = row[key];
                
                if (indicator && value !== undefined && value !== '') {
                    let role = '–ö–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—è';
                    const producers = ['–°–æ—Ñ–∏—è –ö–æ–Ω–¥—Ä–∞—Ç—å–µ–≤–∞'];
                    if (producers.includes(key)) {
                        role = '–ü—Ä–æ–¥—é—Å–µ—Ä—ã';
                    }
                    
                    const numValue = parseFloat(value) || 0;
                    if (numValue >= 0) {
                        convertedData.push({
                            id: DataManager.generateId(),
                            date: new Date().toLocaleDateString('ru-RU'),
                            manager: key,
                            category: role,
                            indicator: indicator,
                            value: numValue * 100,
                            month: month,
                            source: 'csv',
                            appeal: { status: 'none', note: '', createdAt: null }
                        });
                    }
                }
            });
        }
    });
    
    return convertedData;
}

function extractMonthFromFileName(fileName) {
    const monthMap = {
        'yanvar': '–Ø–Ω–≤–∞—Ä—å', 'ianvar': '–Ø–Ω–≤–∞—Ä—å',
        'fevral': '–§–µ–≤—Ä–∞–ª—å',
        'mart': '–ú–∞—Ä—Ç',
        'aprel': '–ê–ø—Ä–µ–ª—å',
        'mai': '–ú–∞–π',
        'iyun': '–ò—é–Ω—å',
        'iyul': '–ò—é–ª—å', 'iiul': '–ò—é–ª—å',
        'avgust': '–ê–≤–≥—É—Å—Ç'
    };
    
    const lowerFileName = fileName.toLowerCase();
    for (const [key, value] of Object.entries(monthMap)) {
        if (lowerFileName.includes(key)) {
            return value;
        }
    }
    
    // Fallback
    const currentMonth = new Date().toLocaleDateString('ru-RU', { month: 'long' });
    return currentMonth.charAt(0).toUpperCase() + currentMonth.slice(1);
}

function saveFileInfo(fileName, recordCount, type) {
    const key = `${type}History`;
    const history = JSON.parse(localStorage.getItem(key) || '[]');
    
    history.unshift({
        fileName,
        recordCount,
        uploadDate: new Date().toLocaleString('ru-RU'),
        type: 'file'
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 50 —Ñ–∞–π–ª–∞–º–∏
    if (history.length > 50) {
        history.splice(50);
    }
    
    localStorage.setItem(key, JSON.stringify(history));
}

// =====================================================
// –ò–°–¢–û–†–ò–Ø –û–ü–ï–†–ê–¶–ò–ô
// =====================================================
function updateHistory(type) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
    updateRecentRecords(type);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    updateFilesList(type);
}

function updateRecentRecords(type) {
    const data = type === 'op' ? DataManager.getOPData() : DataManager.getProdData();
    const tableBody = document.querySelector(`#${type}-recent-table tbody`);
    
    if (!tableBody) return;
    
    const recentData = data.slice(0, 20); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–∞–ø–∏—Å–µ–π
    
    tableBody.innerHTML = recentData.map(record => `
        <tr>
            <td>${record.date}</td>
            <td>${record.manager}</td>
            ${type === 'prod' ? `<td>${record.category}</td>` : ''}
            <td>${record.indicator}</td>
            <td class="${getScoreClass(record.value)}">${record.value}%</td>
            <td>${record.month}</td>
            <td>
                <span class="source-badge ${record.source}">${record.source}</span>
            </td>
        </tr>
    `).join('');
}

function updateFilesList(type) {
    const key = `${type}History`;
    const history = JSON.parse(localStorage.getItem(key) || '[]');
    const container = document.getElementById(`${type}-files-list`);
    
    if (!container) return;
    
    if (history.length === 0) {
        container.innerHTML = '<p class="no-files">–§–∞–π–ª—ã –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–ª–∏—Å—å</p>';
        return;
    }
    
    container.innerHTML = history.map(file => `
        <div class="file-item">
            <div class="file-info">
                <h4>${file.fileName}</h4>
                <p>–ó–∞–ø–∏—Å–µ–π: ${file.recordCount} | –ó–∞–≥—Ä—É–∂–µ–Ω: ${file.uploadDate}</p>
            </div>
        </div>
    `).join('');
}

function showHistoryTab(type, tab) {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll(`#${type}-admin-page .tab-btn`).forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –ü–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    document.querySelectorAll(`#${type}-history-recent, #${type}-history-files`).forEach(content => {
        content.style.display = 'none';
    });
    
    document.getElementById(`${type}-history-${tab}`).style.display = 'block';
}

// =====================================================
// –î–ê–®–ë–û–†–î–´
// =====================================================
function initOPDashboard() {
    console.log('üìä –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –û–ü');
    
    const data = DataManager.getOPData();
    console.log(`üìã –î–∞–Ω–Ω—ã—Ö –¥–ª—è –û–ü –¥–∞—à–±–æ—Ä–¥–∞: ${data.length}`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    initializeFilters('op', data);
    
    // –†–µ–Ω–¥–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
    renderDashboard('op', data);
}

function initProdDashboard() {
    console.log('üìà –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞—à–±–æ—Ä–¥–∞ –ü—Ä–æ–¥–∞–∫—à–Ω');
    
    const data = DataManager.getProdData();
    console.log(`üìã –î–∞–Ω–Ω—ã—Ö –¥–ª—è –ü—Ä–æ–¥–∞–∫—à–Ω –¥–∞—à–±–æ—Ä–¥–∞: ${data.length}`);
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ñ–∏–ª—å—Ç—Ä–æ–≤
    initializeFilters('prod', data);
    
    // –†–µ–Ω–¥–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
    renderDashboard('prod', data);
}

function initializeFilters(type, data) {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const months = [...new Set(data.map(r => r.month).filter(Boolean))]
        .sort((a, b) => MONTHS_ORDER.indexOf(a) - MONTHS_ORDER.indexOf(b));
    
    const managers = [...new Set(data.map(r => r.manager).filter(Boolean))]
        .filter(name => name && name.length > 2)
        .sort();
    
    const categories = [...new Set(data.map(r => r.category).filter(Boolean))].sort();
    
    console.log(`üîç –§–∏–ª—å—Ç—Ä—ã ${type}: –º–µ—Å—è—Ü—ã=${months.length}, —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏=${managers.length}, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏=${categories.length}`);
    
    // –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
    const monthSelect = document.getElementById(`${type}-dash-month`);
    const managerSelect = document.getElementById(`${type}-dash-manager`);
    const categorySelect = document.getElementById(`${type}-dash-category`);
    
    if (monthSelect) {
        monthSelect.innerHTML = '<option value="">–í—Å–µ –º–µ—Å—è—Ü—ã</option>' +
            months.map(m => `<option value="${m}">${m}</option>`).join('');
    }
    
    if (managerSelect) {
        const label = type === 'op' ? '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∏' : '—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã';
        managerSelect.innerHTML = `<option value="">–í—Å–µ ${label}</option>` +
            managers.map(m => `<option value="${m}">${m}</option>`).join('');
    }
    
    if (categorySelect) {
        categorySelect.innerHTML = '<option value="">–í—Å–µ —Ä–æ–ª–∏</option>' +
            categories.map(c => `<option value="${c}">${c}</option>`).join('');
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
    [monthSelect, managerSelect, categorySelect].forEach(select => {
        if (select) {
            select.addEventListener('change', () => {
                console.log(`üîÑ –§–∏–ª—å—Ç—Ä –∏–∑–º–µ–Ω–µ–Ω: ${select.id}="${select.value}"`);
                renderDashboard(type, data);
            });
        }
    });
}

function applyFilters(type, data) {
    const monthFilter = document.getElementById(`${type}-dash-month`)?.value || '';
    const managerFilter = document.getElementById(`${type}-dash-manager`)?.value || '';
    const categoryFilter = document.getElementById(`${type}-dash-category`)?.value || '';
    
    const filtered = data.filter(record => {
        const monthMatch = !monthFilter || record.month === monthFilter;
        const managerMatch = !managerFilter || record.manager === managerFilter;
        const categoryMatch = !categoryFilter || record.category === categoryFilter;
        
        return monthMatch && managerMatch && categoryMatch;
    });
    
    console.log(`üìä –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ ${filtered.length} –∏–∑ ${data.length} –∑–∞–ø–∏—Å–µ–π`);
    return filtered;
}

function renderDashboard(type, data) {
    console.log(`üé® –†–µ–Ω–¥–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞ ${type}`);
    
    const filteredData = applyFilters(type, data);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ KPI
    updateKPI(type, filteredData);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    updateCharts(type, filteredData);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
    updateRating(type, filteredData);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–ø–µ–ª–ª—è—Ü–∏–π
    updateAppeals(type, filteredData);
}

// =====================================================
// KPI –ë–õ–û–ö–ò
// =====================================================
function updateKPI(type, data) {
    const totalChecks = data.length;
    const avgScore = totalChecks > 0 ? Math.round(data.reduce((sum, r) => sum + r.value, 0) / totalChecks) : 0;
    const activeManagers = new Set(data.map(r => r.manager)).size;
    const premiumCount = data.filter(r => r.value >= 85).length;
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –≤ DOM
    const elements = {
        [`${type}-total-checks`]: totalChecks,
        [`${type}-avg-score`]: `${avgScore}%`,
        [`${type}-active-managers`]: activeManagers,
        [`${type}-premium-count`]: premiumCount
    };
    
    Object.entries(elements).forEach(([id, value]) => {
        const element = document.getElementById(id);
        if (element) {
            element.textContent = value;
            element.classList.add('animate-update');
            setTimeout(() => element.classList.remove('animate-update'), 300);
        }
    });
    
    console.log(`üìà KPI –æ–±–Ω–æ–≤–ª–µ–Ω: –ø—Ä–æ–≤–µ—Ä–æ–∫=${totalChecks}, —Å—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª=${avgScore}%, –∞–∫—Ç–∏–≤–Ω—ã—Ö=${activeManagers}, –ø—Ä–µ–º–∏–∏=${premiumCount}`);
}

// =====================================================
// –ì–†–ê–§–ò–ö–ò
// =====================================================
function updateCharts(type, data) {
    // –¢—Ä–µ–Ω–¥ –ø–æ –º–µ—Å—è—Ü–∞–º
    updateTrendChart(type, data);
    
    // –†–∞–¥–∞—Ä –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
    updateRadarChart(type, data);
}

function updateTrendChart(type, data) {
    const canvas = document.getElementById(`${type}-trend-chart`);
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    const monthlyData = {};
    data.forEach(record => {
        if (!monthlyData[record.month]) {
            monthlyData[record.month] = [];
        }
        monthlyData[record.month].push(record.value);
    });
    
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    const chartData = MONTHS_ORDER.map(month => {
        const values = monthlyData[month] || [];
        return values.length > 0 ? Math.round(values.reduce((sum, val) => sum + val, 0) / values.length) : 0;
    }).filter((val, index) => monthlyData[MONTHS_ORDER[index]]);
    
    const labels = MONTHS_ORDER.filter(month => monthlyData[month]);
    
    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    if (charts[`${type}-trend`]) {
        charts[`${type}-trend`].destroy();
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    charts[`${type}-trend`] = new Chart(ctx, {
        type: 'line',
        data: {
            labels: labels,
            datasets: [{
                label: '–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –º–µ—Å—è—Ü–∞–º',
                data: chartData,
                borderColor: '#10b981',
                backgroundColor: 'rgba(16, 185, 129, 0.1)',
                borderWidth: 3,
                fill: true,
                tension: 0.4,
                pointBackgroundColor: '#10b981',
                pointBorderColor: '#ffffff',
                pointBorderWidth: 2,
                pointRadius: 6
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    labels: {
                        color: '#f1f5f9',
                        font: { size: 12 }
                    }
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    max: 100,
                    ticks: {
                        color: '#94a3b8',
                        callback: function(value) { return value + '%'; }
                    },
                    grid: { color: 'rgba(148, 163, 184, 0.1)' }
                },
                x: {
                    ticks: { color: '#94a3b8' },
                    grid: { color: 'rgba(148, 163, 184, 0.1)' }
                }
            }
        }
    });
}

function updateRadarChart(type, data) {
    const canvas = document.getElementById(`${type}-radar-chart`);
    if (!canvas) return;
    
    const ctx = canvas.getContext('2d');
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
    const indicatorData = {};
    data.forEach(record => {
        if (!indicatorData[record.indicator]) {
            indicatorData[record.indicator] = [];
        }
        indicatorData[record.indicator].push(record.value);
    });
    
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –ø–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è–º
    const indicators = Object.keys(indicatorData).slice(0, 6); // –ú–∞–∫—Å–∏–º—É–º 6 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    const averages = indicators.map(indicator => {
        const values = indicatorData[indicator];
        return Math.round(values.reduce((sum, val) => sum + val, 0) / values.length);
    });
    
    // –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    if (charts[`${type}-radar`]) {
        charts[`${type}-radar`].destroy();
    }
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
    charts[`${type}-radar`] = new Chart(ctx, {
        type: 'radar',
        data: {
            labels: indicators.map(ind => ind.length > 20 ? ind.substring(0, 20) + '...' : ind),
            datasets: [{
                label: '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –∫–∞—á–µ—Å—Ç–≤–∞',
                data: averages,
                borderColor: '#3b82f6',
                backgroundColor: 'rgba(59, 130, 246, 0.2)',
                borderWidth: 2,
                pointBackgroundColor: '#3b82f6',
                pointBorderColor: '#ffffff',
                pointBorderWidth: 2,
                pointRadius: 4
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    labels: {
                        color: '#f1f5f9',
                        font: { size: 12 }
                    }
                }
            },
            scales: {
                r: {
                    beginAtZero: true,
                    max: 100,
                    ticks: {
                        color: '#94a3b8',
                        backdropColor: 'transparent',
                        callback: function(value) { return value + '%'; }
                    },
                    grid: { color: 'rgba(148, 163, 184, 0.2)' },
                    angleLines: { color: 'rgba(148, 163, 184, 0.2)' },
                    pointLabels: {
                        color: '#f1f5f9',
                        font: { size: 10 }
                    }
                }
            }
        }
    });
}

// =====================================================
// –†–ï–ô–¢–ò–ù–ì –°–û–¢–†–£–î–ù–ò–ö–û–í
// =====================================================
function updateRating(type, data) {
    const tableBody = document.querySelector(`#${type}-rating-table tbody`);
    if (!tableBody) return;
    
    // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º
    const managerStats = {};
    data.forEach(record => {
        if (!managerStats[record.manager]) {
            managerStats[record.manager] = {
                manager: record.manager,
                category: record.category,
                totalScore: 0,
                count: 0,
                values: []
            };
        }
        managerStats[record.manager].totalScore += record.value;
        managerStats[record.manager].count += 1;
        managerStats[record.manager].values.push(record.value);
    });
    
    // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –±–∞–ª–ª–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
    const ranking = Object.values(managerStats)
        .map(stat => ({
            ...stat,
            avgScore: Math.round(stat.totalScore / stat.count),
            isPremium: (stat.totalScore / stat.count) >= 85
        }))
        .sort((a, b) => b.avgScore - a.avgScore);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è HTML —Ç–∞–±–ª–∏—Ü—ã
    tableBody.innerHTML = ranking.map((stat, index) => `
        <tr class="ranking-row">
            <td class="rank">${index + 1}</td>
            <td class="manager-name">${stat.manager}</td>
            ${type === 'prod' ? `<td class="category">${stat.category}</td>` : ''}
            <td class="score ${getScoreClass(stat.avgScore)}">${stat.avgScore}%</td>
            <td class="count">${stat.count}</td>
            <td class="premium">
                ${stat.isPremium ? '<span class="premium-indicator"><span class="premium-star">‚≠ê</span> –ü—Ä–µ–º–∏—è</span>' : ''}
            </td>
        </tr>
    `).join('');
    
    console.log(`üèÜ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω: ${ranking.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
}

function getScoreClass(score) {
    if (score >= 85) return 'score-high';
    if (score >= 75) return 'score-medium';
    return 'score-low';
}

// =====================================================
// –°–ò–°–¢–ï–ú–ê –ê–ü–ï–õ–õ–Ø–¶–ò–ô
// =====================================================
function updateAppeals(type, data) {
    const appealsData = data.filter(record => record.appeal && record.appeal.status !== 'none');
    const container = document.querySelector(`#${type}-appeals-content .appeals-list`);
    
    if (!container) return;
    
    if (appealsData.length === 0) {
        container.innerHTML = '<p class="no-appeals">–ê–ø–µ–ª–ª—è—Ü–∏–π –Ω–µ—Ç</p>';
        return;
    }
    
    container.innerHTML = appealsData.map(record => `
        <div class="appeal-item">
            <div class="appeal-header">
                <strong>${record.manager}</strong>
                <span class="appeal-status ${record.appeal.status}">${getAppealStatusText(record.appeal.status)}</span>
            </div>
            <div class="appeal-details">
                <p><strong>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å:</strong> ${record.indicator}</p>
                <p><strong>–û—Ü–µ–Ω–∫–∞:</strong> <span class="${getScoreClass(record.value)}">${record.value}%</span></p>
                <p><strong>–ü—Ä–∏—á–∏–Ω–∞:</strong> ${record.appeal.note}</p>
                <p><strong>–î–∞—Ç–∞:</strong> ${new Date(record.appeal.createdAt).toLocaleString('ru-RU')}</p>
            </div>
        </div>
    `).join('');
}

function getAppealStatusText(status) {
    const statusMap = {
        'new': '–ù–æ–≤–∞—è',
        'processing': '–ù–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏',
        'resolved': '–†–µ—à–µ–Ω–∞'
    };
    return statusMap[status] || status;
}

function showAppeals(type, filter) {
    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–∫–ª–∞–¥–æ–∫
    document.querySelectorAll(`#${type}-appeals-content .tab-btn`).forEach(btn => {
        btn.classList.remove('active');
    });
    event.target.classList.add('active');
    
    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∞–ø–µ–ª–ª—è—Ü–∏–π
    const data = type === 'op' ? DataManager.getOPData() : DataManager.getProdData();
    const filteredData = applyFilters(type, data);
    updateAppeals(type, filteredData);
}

// =====================================================
// –ú–û–î–ê–õ–¨–ù–´–ï –û–ö–ù–ê –ò –ê–ü–ï–õ–õ–Ø–¶–ò–ò
// =====================================================
function openAppealModal(recordId) {
    const modal = document.getElementById('appeal-modal');
    const recordIdInput = document.getElementById('appeal-record-id');
    
    if (modal && recordIdInput) {
        recordIdInput.value = recordId;
        modal.style.display = 'flex';
    }
}

function closeModal(modalId) {
    const modal = document.getElementById(modalId);
    if (modal) {
        modal.style.display = 'none';
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã –∞–ø–µ–ª–ª—è—Ü–∏–∏
document.addEventListener('DOMContentLoaded', function() {
    const appealForm = document.getElementById('appeal-form');
    if (appealForm) {
        appealForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const recordId = document.getElementById('appeal-record-id').value;
            const reason = document.getElementById('appeal-reason').value;
            
            if (recordId && reason) {
                submitAppeal(recordId, reason);
                closeModal('appeal-modal');
                document.getElementById('appeal-reason').value = '';
            }
        });
    }
});

function submitAppeal(recordId, reason) {
    // –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–∏ –≤ –û–ü –¥–∞–Ω–Ω—ã—Ö
    let opData = DataManager.getOPData();
    let record = opData.find(r => r.id === recordId);
    let type = 'op';
    
    // –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –û–ü, –∏—â–µ–º –≤ –ü—Ä–æ–¥–∞–∫—à–Ω
    if (!record) {
        let prodData = DataManager.getProdData();
        record = prodData.find(r => r.id === recordId);
        type = 'prod';
    }
    
    if (record) {
        record.appeal = {
            status: 'new',
            note: reason,
            createdAt: Date.now()
        };
        
        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        if (type === 'op') {
            DataManager.saveOPData(opData);
        } else {
            DataManager.saveProdData(prodData);
        }
        
        showNotification('‚úÖ –ê–ø–µ–ª–ª—è—Ü–∏—è –ø–æ–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
        
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞—à–±–æ—Ä–¥–∞ –µ—Å–ª–∏ –æ–Ω –æ—Ç–∫—Ä—ã—Ç
        if (currentPage === `${type}-dashboard`) {
            const data = type === 'op' ? DataManager.getOPData() : DataManager.getProdData();
            renderDashboard(type, data);
        }
    }
}

// =====================================================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
// =====================================================
function clearFilters(type) {
    const selectors = [
        `${type}-dash-month`,
        `${type}-dash-manager`,
        `${type}-dash-category`
    ];
    
    selectors.forEach(id => {
        const element = document.getElementById(id);
        if (element) {
            element.value = '';
        }
    });
    
    // –ü–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞
    const data = type === 'op' ? DataManager.getOPData() : DataManager.getProdData();
    renderDashboard(type, data);
    
    showNotification('üîÑ –§–∏–ª—å—Ç—Ä—ã –æ—á–∏—â–µ–Ω—ã');
}

function exportData(type) {
    const data = type === 'op' ? DataManager.getOPData() : DataManager.getProdData();
    const filteredData = applyFilters(type, data);
    
    if (filteredData.length === 0) {
        showNotification('‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞', 'warning');
        return;
    }
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ CSV
    const headers = type === 'op' 
        ? ['–î–∞—Ç–∞', '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–û—Ü–µ–Ω–∫–∞', '–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫']
        : ['–î–∞—Ç–∞', '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', '–†–æ–ª—å', '–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å', '–û—Ü–µ–Ω–∫–∞', '–ú–µ—Å—è—Ü', '–ò—Å—Ç–æ—á–Ω–∏–∫'];
    
    const csvContent = [
        headers.join(','),
        ...filteredData.map(record => [
            record.date,
            record.manager,
            ...(type === 'prod' ? [record.category] : []),
            `"${record.indicator}"`,
            record.value,
            record.month,
            record.source
        ].join(','))
    ].join('\n');
    
    // –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    const url = URL.createObjectURL(blob);
    link.setAttribute('href', url);
    link.setAttribute('download', `${type}_export_${new Date().toISOString().split('T')[0]}.csv`);
    link.style.visibility = 'hidden';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    showNotification(`üìÅ –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ ${filteredData.length} –∑–∞–ø–∏—Å–µ–π`);
}

// =====================================================
// –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø
// =====================================================
function showNotification(message, type = 'success') {
    const notification = document.getElementById('notification');
    if (!notification) return;
    
    notification.textContent = message;
    notification.className = `notification show ${type}`;
    
    // –°–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    setTimeout(() => {
        notification.classList.remove('show');
    }, 3000);
    
    console.log(`üì¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: ${message}`);
}

// =====================================================
// –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
// =====================================================
document.addEventListener('DOMContentLoaded', function() {
    console.log('‚úÖ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –Ω–∏—Ö
    window.addEventListener('click', function(e) {
        if (e.target.classList.contains('modal')) {
            closeModal(e.target.id);
        }
    });
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (DataManager.getOPData().length === 0) {
        DataManager.saveOPData(DataManager.generateTestOPData());
    }
    
    if (DataManager.getProdData().length === 0) {
        DataManager.saveProdData(DataManager.generateTestProdData());
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
    initQualityPanels();
    
    console.log('üéØ –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—á–µ—Å—Ç–≤–æ–º –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!');
    showNotification('üöÄ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!');
});

// =====================================================
// –ö–ê–ß–ï–°–¢–í–ï–ù–ù–´–ï –ü–†–û–í–ï–†–û–ß–ù–´–ï –ü–ê–ù–ï–õ–ò
// =====================================================

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π
function initQualityPanels() {
    console.log('üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–æ—á–Ω—ã—Ö –ø–∞–Ω–µ–ª–µ–π...');
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –û–ü –ø–∞–Ω–µ–ª–∏
    const opForm = document.getElementById('op-quality-form');
    if (opForm) {
        opForm.addEventListener('submit', (e) => handleQualityFormSubmit('op', e));
        initScreenshotUpload('op');
        renderQualityResults('op');
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const dateInput = document.getElementById('op-check-date');
        if (dateInput) dateInput.value = new Date().toISOString().split('T')[0];
    }
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ü—Ä–æ–¥–∞–∫—à–Ω –ø–∞–Ω–µ–ª–∏
    const prodForm = document.getElementById('prod-quality-form');
    if (prodForm) {
        prodForm.addEventListener('submit', (e) => handleQualityFormSubmit('prod', e));
        initScreenshotUpload('prod');
        renderQualityResults('prod');
        
        // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        const dateInput = document.getElementById('prod-check-date');
        if (dateInput) dateInput.value = new Date().toISOString().split('T')[0];
    }
    
    console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–æ—á–Ω—ã–µ –ø–∞–Ω–µ–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
}

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
window.setIndicator = function(department, indicator, value) {
    const input = document.getElementById(`${department}-${indicator}`);
    const buttons = document.querySelectorAll(`[onclick*="setIndicator('${department}', '${indicator}',"]`);
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
    buttons.forEach(btn => btn.classList.remove('active'));
    
    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∫–Ω–æ–ø–∫—É
    const activeBtn = Array.from(buttons).find(btn => btn.onclick.toString().includes(`'${value}'`));
    if (activeBtn) activeBtn.classList.add('active');
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if (input) input.value = value;
    
    console.log(`–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä ${department}.${indicator} = ${value}`);
};

window.clearIndicator = function(department, indicator) {
    const input = document.getElementById(`${department}-${indicator}`);
    const buttons = document.querySelectorAll(`[onclick*="setIndicator('${department}', '${indicator}',"]`);
    
    // –°–±—Ä–æ—Å –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
    buttons.forEach(btn => btn.classList.remove('active'));
    
    // –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
    if (input) input.value = '';
    
    console.log(`–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä ${department}.${indicator} –æ—á–∏—â–µ–Ω`);
};

window.clearQualityForm = function(department) {
    const form = document.getElementById(`${department}-quality-form`);
    if (!form) return;
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    form.reset();
    
    // –û—á–∏—â–∞–µ–º –≤—Å–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
    const buttons = form.querySelectorAll('.indicator-btn');
    buttons.forEach(btn => btn.classList.remove('active'));
    
    // –û—á–∏—â–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    removeScreenshot(department);
    
    showNotification('üßπ –§–æ—Ä–º–∞ –æ—á–∏—â–µ–Ω–∞');
};

// Drag & Drop –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤
window.initScreenshotUpload = function(department) {
    const dropZone = document.getElementById(`${department}-screenshot-drop`);
    const fileInput = document.getElementById(`${department}-screenshot-input`);
    const preview = document.getElementById(`${department}-screenshot-preview`);
    const img = document.getElementById(`${department}-screenshot-img`);
    
    if (!dropZone || !fileInput) return;
    
    // –ö–ª–∏–∫ –ø–æ –∑–æ–Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
    dropZone.addEventListener('click', () => fileInput.click());
    
    // Drag & Drop —Å–æ–±—ã—Ç–∏—è
    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('drag-over');
    });
    
    dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('drag-over');
    });
    
    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('drag-over');
        
        const files = e.dataTransfer.files;
        if (files.length > 0) {
            handleScreenshotFile(files[0], department);
        }
    });
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
    fileInput.addEventListener('change', (e) => {
        if (e.target.files.length > 0) {
            handleScreenshotFile(e.target.files[0], department);
        }
    });
};

function handleScreenshotFile(file, department) {
    if (!file.type.startsWith('image/')) {
        showNotification('‚ùå –ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', 'error');
        return;
    }
    
    if (file.size > 5 * 1024 * 1024) { // 5MB
        showNotification('‚ùå –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5MB', 'error');
        return;
    }
    
    const reader = new FileReader();
    reader.onload = (e) => {
        const preview = document.getElementById(`${department}-screenshot-preview`);
        const img = document.getElementById(`${department}-screenshot-img`);
        const dropZone = document.querySelector(`#${department}-screenshot-drop .drop-zone`);
        
        if (img && preview) {
            img.src = e.target.result;
            preview.style.display = 'inline-block';
            
            // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
            const p = dropZone.querySelector('p');
            if (p) p.style.display = 'none';
        }
    };
    reader.readAsDataURL(file);
    
    showNotification('üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
}

window.removeScreenshot = function(department) {
    const preview = document.getElementById(`${department}-screenshot-preview`);
    const img = document.getElementById(`${department}-screenshot-img`);
    const fileInput = document.getElementById(`${department}-screenshot-input`);
    const dropZone = document.querySelector(`#${department}-screenshot-drop .drop-zone`);
    
    if (preview) preview.style.display = 'none';
    if (img) img.src = '';
    if (fileInput) fileInput.value = '';
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏
    const p = dropZone?.querySelector('p');
    if (p) p.style.display = 'block';
    
    showNotification('üóëÔ∏è –°–∫—Ä–∏–Ω—à–æ—Ç —É–¥–∞–ª–µ–Ω');
};

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ñ–æ—Ä–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
function handleQualityFormSubmit(department, e) {
    e.preventDefault();
    
    const formData = new FormData(e.target);
    const data = {};
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    for (let [key, value] of formData.entries()) {
        data[key] = value;
    }
    
    // –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
    const indicators = {};
    const indicatorInputs = e.target.querySelectorAll('input[type="hidden"][name]');
    indicatorInputs.forEach(input => {
        if (input.value) {
            indicators[input.name] = input.value;
        }
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
    const img = document.getElementById(`${department}-screenshot-img`);
    const screenshot = img && img.src.startsWith('data:') ? img.src : null;
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    const record = {
        id: Date.now(),
        date: data.date || new Date().toISOString().split('T')[0],
        manager: data.manager,
        department: department.toUpperCase(),
        dealLink: data.dealLink || '',
        dealId: data.dealId || '',
        comment: data.comment || '',
        indicators: indicators,
        screenshot: screenshot,
        created: new Date().toISOString()
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
    const storageKey = `${department}QualityChecks`;
    const existingData = JSON.parse(localStorage.getItem(storageKey) || '[]');
    existingData.push(record);
    localStorage.setItem(storageKey, JSON.stringify(existingData));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    renderQualityResults(department);
    
    // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
    clearQualityForm(department);
    
    showNotification('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
}

// –†–µ–Ω–¥–µ—Ä —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function renderQualityResults(department) {
    const table = document.getElementById(`${department}-quality-results`);
    if (!table) return;
    
    const tbody = table.querySelector('tbody');
    const storageKey = `${department}QualityChecks`;
    const data = JSON.parse(localStorage.getItem(storageKey) || '[]');
    
    tbody.innerHTML = '';
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    data.sort((a, b) => new Date(b.created) - new Date(a.created));
    
    data.forEach(record => {
        const row = document.createElement('tr');
        
        if (department === 'op') {
            row.innerHTML = `
                <td>${record.date}</td>
                <td>${record.manager || '-'}</td>
                <td>${renderIndicatorBadge(record.indicators?.kev)}</td>
                <td>${renderIndicatorBadge(record.indicators?.deadlines)}</td>
                <td>${renderIndicatorBadge(record.indicators?.communication)}</td>
                <td>${renderIndicatorBadge(record.indicators?.crm)}</td>
                <td>${record.comment || '-'}</td>
                <td>
                    ${record.dealLink ? `<a href="${record.dealLink}" target="_blank">üîó</a>` : ''}
                    ${record.screenshot ? `<span onclick="showScreenshot('${record.screenshot}')" style="cursor: pointer;">üì∏</span>` : ''}
                    <button onclick="deleteQualityRecord('${department}', ${record.id})" class="btn-danger btn-sm">üóëÔ∏è</button>
                </td>
            `;
        } else {
            row.innerHTML = `
                <td>${record.date}</td>
                <td>${record.manager || '-'}</td>
                <td>${record.department}</td>
                <td>${renderIndicatorBadge(record.indicators?.stage)}</td>
                <td>${renderIndicatorBadge(record.indicators?.tz)}</td>
                <td>${renderIndicatorBadge(record.indicators?.executors)}</td>
                <td>${renderIndicatorBadge(record.indicators?.comments)}</td>
                <td>${renderIndicatorBadge(record.indicators?.inwork)}</td>
                <td>${renderIndicatorBadge(record.indicators?.fields)}</td>
                <td>${renderIndicatorBadge(record.indicators?.prepayment)}</td>
                <td>
                    ${record.dealLink ? `<a href="${record.dealLink}" target="_blank">üîó</a>` : ''}
                    ${record.screenshot ? `<span onclick="showScreenshot('${record.screenshot}')" style="cursor: pointer;">üì∏</span>` : ''}
                    <button onclick="deleteQualityRecord('${department}', ${record.id})" class="btn-danger btn-sm">üóëÔ∏è</button>
                </td>
            `;
        }
        
        tbody.appendChild(row);
    });
}

function renderIndicatorBadge(value) {
    if (!value) return '<span class="quality-indicator-badge empty">-</span>';
    if (value === 'good') return '<span class="quality-indicator-badge good">‚úì</span>';
    if (value === 'bad') return '<span class="quality-indicator-badge bad">‚úó</span>';
    return '<span class="quality-indicator-badge empty">-</span>';
}

window.deleteQualityRecord = function(department, recordId) {
    if (!confirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É?')) return;
    
    const storageKey = `${department}QualityChecks`;
    const data = JSON.parse(localStorage.getItem(storageKey) || '[]');
    const filteredData = data.filter(record => record.id !== recordId);
    localStorage.setItem(storageKey, JSON.stringify(filteredData));
    
    renderQualityResults(department);
    showNotification('üóëÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
};

window.showScreenshot = function(dataUrl) {
    const modal = document.createElement('div');
    modal.className = 'modal';
    modal.style.display = 'block';
    modal.innerHTML = `
        <div class="modal-content" style="max-width: 800px;">
            <span class="close" onclick="this.parentElement.parentElement.remove()">&times;</span>
            <img src="${dataUrl}" style="width: 100%; height: auto; border-radius: 8px;">
        </div>
    `;
    document.body.appendChild(modal);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.remove();
    });
};

// =====================================================
// –≠–ö–°–ü–û–†–¢ –ì–õ–û–ë–ê–õ–¨–ù–´–• –§–£–ù–ö–¶–ò–ô
// =====================================================
window.showPage = showPage;
window.showHistoryTab = showHistoryTab;
window.showAppeals = showAppeals;
window.clearFilters = clearFilters;
window.exportData = exportData;
window.closeModal = closeModal;
window.openAppealModal = openAppealModal;